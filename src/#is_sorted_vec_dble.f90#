!> @ingroup is_sorted_vec_asc
!> 
!> @brief
!> Checks if a vector is sorted in either ascending or decending order.
!> 
!> @details
!> Checks if a vector is sorted in ascending order.
!> 
!> @retval sorted
!> Indicated if the vector vec is sorted in acending order.
!> 
!> | Value | Meaning                                    |
!> |:-----:|:-------------------------------------------|
!> | T     | The vector is sorted in ascending order     |
!> | F     | The vector is not sorted in ascending order |
!> 
!> @param x
!> The vector to be sorted.
!> 
!> @note
!> In prior versions of this function, an interger was returns instread of a logical. If the vector was not sorted, than the interger would indicate the position of the first two pairwise elements where one element was larger than the following element. This proved to not be useful and was taken out. If need for this functionally is determined in the future, than it has been decided that it will be implimented in a different function, most likely wrapped in the same interface.
!> 
!> @note
!> An empty vector is considered sorted.
!> 
!> @note
!> This algorithm requires at most N - 1 compares.
!>
!> @author Arin R. Bratt
!> @date 01/07/2014

function is_sorted_vec_asc_dble(x) result(sorted)
  ! Parameters
  double precision, intent(in) :: x(:)

  ! Result
  logical :: sorted

  ! Variables
  integer :: i

  ! Main loop
  ! This structure of the loop avoids referenceing the i + 1 element that is not in the vector and avoids any checks on empty and single value vectors.
  do i = 1,size(x) - 1

     ! If a pairwise combination is out of order, set sorted to false and return.
     if (x(i + 1) < x(i)) then
        sorted = .false.
        return
     end if

  end do

  ! If no out of order pairwise combinations were not found, set sorted to true.
  sorted = .true.
end function is_sorted_vec_asc_dble

